a proxy server, retrieves data on the internet, on behalf of the user
benefits:  privacy: invisible IP address
           speed : cache database and saving bandwidth
           activity logging (in  a company)

we would be developing a simple multi-threaded proxy server capable of handling HTTP traffic.
mostly based on the basic socket programming ideas.

1. creating an incoming socket
2. accept client and process
once a successful connection is made, we dispatch the request in a separate thread,
making ourselves available for the next request.
This allows us to handle multiple requests simultaneously which boosts the performance of the server multifold times.
3. redirecting the traffic:
- we extract the URL from the received request data.
- we find the destination address of the request. Address is a tuple of (destination_ip_address, destination_port_no).
We will be receiving data from this address.
- Now, we setup a new connection to the destination server (or remote server),
and then send a copy of the original request to the server. The server will then respond with a response.
All the response messages use the generic message format of RFC 822.
credits to geeksforgeeks.org on the internet.
- We then redirect the server’s response to the client. conn is the original connection to the client.
The response may be bigger than MAX_REQUEST_LEN that we are receiving in one call, so,
a null response marks the end of the response.
How to test the server?
1. Run the server on a terminal. Keep it running and switch to your favorite browser.
2. Go to your browser’s proxy settings and change the proxy server to ‘localhost’ and port to ‘12345’.
3. Now open any HTTP website (not HTTPS), for eg. geeksforgeeks.org
Once the server is running, we can monitor the requests coming to the client.
We can use that data to monitor the content that is going or we can develop statistics based on the content.
We can even restrict access to a website or blacklist an IP address.
